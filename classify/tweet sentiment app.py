# -*- coding: utf-8 -*-
"""twt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B65P0unH4kV3wXmG4rcrzh6cHnCLvMVX
"""



################ Import Packages and Dependencies ######################

import pickle
import tweepy as tw
import streamlit as st
import joblib,os
import numpy as np
import pandas as pd



########## load data #############

#vectorizer

#model = pickle.load(open("/Users/fbarde/Desktop/untitled /classification-predict-streamlit-template-master/resources/tfidfvect.pkl","rb"))
#tweet_input = pickle.loads(model)

#load raw data
#raw = pd.read_csv("/Users/fbarde/Desktop/tweet_class/train.csv")


################ Access Logins ##############################

consumer_key = '0mEiburvJ3tsXiLq7DAChCFpX'
consumer_secret = 'l4b8Ef2xSpyN0TUm96gcY6mgnISc9f2rFovgCAmbtf2vJ6E3g4'
access_token = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
access_token_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
auth = tw.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tw.API(auth, wait_on_rate_limit=True)

####################################################################
####################################################################

                #Loading the model
#loaded model
loaded_model = pickle.load(open("/Users/fbarde/Desktop/classify/TM12_1.0_LogReg_model.pkl", "rb"))

####################################################################

#creating a function for prediction

def tweet_prediction(tweet_input):
    
    #tweet_input = []
    
    #tweet_input = [input('enter a text: ')]
    prediction=loaded_model.predict(tweet_input)

    if prediction < 0:
        return "Negative"
    elif prediction == 0:
        return "Neutral"
    else:
        return "Positive"

####### Build APP #############


# The main function where we will build the actual app
def main():
	"""Tweet Classifier App with Streamlit """

	# Creates a main title and subheader on your page -
	# these are static across all pages
	st.title("Tweet Classifer")
	st.subheader("Climate change tweet classification")

######################### Sidebar Menu ####
	
	#raw_text = st.sidebar.text_area("Enter Text","Type Here")
	
	tweet_text = st.sidebar.text_input("Enter the exact twitter handle of the Personality (without @)")
	


	#####################
	
	######### body container ############
	
	st.info("Prediction with ML Models")
	st.info("WordCloud")
	st.info("Sentiment Ratio")
	
	# Creating sidebar with selection box -
	# you can create multiple pages this way
	options = ["Prediction", "Information"]
	selection = st.sidebar.selectbox("Choose Option", options)

	# Building out the "Information" page
	if selection == "Information":
		st.info("General Information")
		# You can read a markdown file from supporting resources folder
		st.markdown("Some information here")

		st.subheader("Raw Twitter data and label")
		if st.checkbox('Show raw data'): # data is hidden if box is unchecked
			st.write(raw[['sentiment', 'message']]) # will write the df to the page

	# Building out the predication page
	if selection == "Prediction":
		st.info("Prediction with ML Models")
		# Creating a text box for user input
		message = st.sidebar.text_area("Enter Text","Type Here")
        #code for prediction
        tweet = ''
        
	

		if st.button("Classify"):
            tweet = tweet_prediction([message])
        st.success(tweet)
			# Transforming user input with vectorizer
			#vect_text = 1
			# Load your .pkl file with the model of your choice + make predictions
			# Try loading in multiple models to give the user a choice
			#predictor = pickle.load(open("/Users/fbarde/Desktop/classify/trained_model.sav", "rb"))
			#predictions = predictor.predict(raw_text)

			# When model has successfully run, will print prediction
			# You can use a dictionary or similar structure to make this output
			# more human interpretable.
			#st.success("Text Categorized as: {}".format(predictions))


	#####################################
	



if __name__ == '__main__':
	main()